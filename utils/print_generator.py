"""
Print generator for creating printable storyboard layouts
"""

from typing import Dict, Any, List
from datetime import datetime

def generate_printable_storyboard(project: Dict[str, Any], status: Dict[str, Any]) -> str:
    """
    Generate printable HTML for storyboard
    
    Args:
        project: Project data
        status: Generation status with frames
        
    Returns:
        HTML string for printable storyboard
    """
    
    frames = status.get('frames', [])
    analysis = status.get('analysis', {})
    
    # Build HTML
    html = f"""
    <div class="printable-storyboard">
        <div class="storyboard-header">
            <h1>{analysis.get('title', 'Untitled Screenplay')}</h1>
            <div class="project-info">
                <div class="info-item">
                    <strong>Project:</strong> {project['filename']}
                </div>
                <div class="info-item">
                    <strong>Generated:</strong> {datetime.now().strftime('%B %d, %Y at %I:%M %p')}
                </div>
                <div class="info-item">
                    <strong>Frames:</strong> {len(frames)}
                </div>
                <div class="info-item">
                    <strong>Scenes:</strong> {analysis.get('total_scenes', 0)}
                </div>
                <div class="info-item">
                    <strong>Style:</strong> {status.get('style', 'classic').title()}
                </div>
            </div>
        </div>
        
        <div class="storyboard-grid">
            {generate_frame_grid(frames)}
        </div>
        
        <div class="storyboard-footer">
            <p>Generated by Script Fury Simple - {datetime.now().strftime('%Y')}</p>
        </div>
    </div>
    """
    
    return html

def generate_frame_grid(frames: List[Dict[str, Any]]) -> str:
    """Generate HTML grid for frames"""
    
    if not frames:
        return "<p>No frames to display</p>"
    
    grid_html = ""
    
    # Group frames by scene
    scenes = {}
    for frame in frames:
        scene_num = frame['scene_number']
        if scene_num not in scenes:
            scenes[scene_num] = []
        scenes[scene_num].append(frame)
    
    # Generate HTML for each scene
    for scene_num in sorted(scenes.keys()):
        scene_frames = scenes[scene_num]
        
        grid_html += f"""
        <div class="scene-section">
            <div class="scene-header">
                <h2>Scene {scene_num}</h2>
                <div class="scene-info">
                    <span class="location">{scene_frames[0].get('location', 'Unknown')}</span>
                    <span class="time">{scene_frames[0].get('time_of_day', 'DAY')}</span>
                </div>
            </div>
            
            <div class="frames-row">
                {generate_scene_frames(scene_frames)}
            </div>
        </div>
        """
    
    return grid_html

def generate_scene_frames(frames: List[Dict[str, Any]]) -> str:
    """Generate HTML for frames in a scene"""
    
    frames_html = ""
    
    for frame in frames:
        frames_html += f"""
        <div class="frame-panel">
            <div class="frame-header">
                <span class="frame-number">Frame {frame['frame_number']}</span>
            </div>
            
            <div class="frame-image">
                <img src="{frame.get('image_url', '')}" 
                     alt="Scene {frame['scene_number']} Frame {frame['frame_number']}"
                     onload="this.style.display='block'"
                     onerror="this.style.display='none'; this.nextElementSibling.style.display='block'">
                <div class="image-placeholder" style="display:none;">
                    <p>Frame {frame['scene_number']}.{frame['frame_number']}</p>
                    <p>{frame.get('location', 'Unknown Location')}</p>
                    <p>{frame.get('time_of_day', 'DAY')}</p>
                </div>
            </div>
            
            <div class="frame-description">
                <p><strong>Shot:</strong> {extract_shot_type(frame.get('prompt_used', frame.get('prompt', '')))}</p>
                <p><strong>Action:</strong> {frame.get('key_visual', 'Scene action')}</p>
                {generate_character_info(frame.get('characters', []))}
            </div>
        </div>
        """
    
    return frames_html

def extract_shot_type(prompt: str) -> str:
    """Extract shot type from prompt"""
    # Order matters - check longer patterns first
    shot_types = ['extreme close-up', 'establishing shot', 'wide shot', 'medium shot', 'close-up']
    
    prompt_lower = prompt.lower()
    for shot_type in shot_types:
        if shot_type in prompt_lower:
            return shot_type.title()
    
    return "Medium Shot"

def generate_character_info(characters: List[str]) -> str:
    """Generate character information HTML"""
    if not characters:
        return ""
    
    char_list = ", ".join(characters[:3])  # Max 3 characters
    return f"<p><strong>Characters:</strong> {char_list}</p>"

def get_print_styles() -> str:
    """Get CSS styles for printable storyboard"""
    return """
    <style>
        @media print {
            @page {
                size: A4;
                margin: 0.5in;
            }
            
            body {
                font-family: Arial, sans-serif;
                font-size: 12px;
                line-height: 1.4;
                color: #000;
                background: white;
            }
        }
        
        .printable-storyboard {
            max-width: 100%;
            margin: 0 auto;
            padding: 20px;
            font-family: Arial, sans-serif;
        }
        
        .storyboard-header {
            text-align: center;
            border-bottom: 2px solid #333;
            margin-bottom: 30px;
            padding-bottom: 20px;
        }
        
        .storyboard-header h1 {
            font-size: 24px;
            margin: 0 0 15px 0;
            color: #333;
        }
        
        .project-info {
            display: flex;
            justify-content: center;
            flex-wrap: wrap;
            gap: 20px;
            font-size: 14px;
            color: #666;
        }
        
        .info-item {
            margin: 5px 0;
        }
        
        .scene-section {
            margin-bottom: 40px;
            page-break-inside: avoid;
        }
        
        .scene-header {
            background: #f0f0f0;
            padding: 10px 15px;
            margin-bottom: 15px;
            border-left: 4px solid #333;
        }
        
        .scene-header h2 {
            margin: 0 0 5px 0;
            font-size: 18px;
            color: #333;
        }
        
        .scene-info {
            font-size: 14px;
            color: #666;
        }
        
        .scene-info .location {
            font-weight: bold;
            margin-right: 15px;
        }
        
        .frames-row {
            display: flex;
            flex-wrap: wrap;
            gap: 20px;
            justify-content: flex-start;
        }
        
        .frame-panel {
            flex: 1;
            min-width: 300px;
            max-width: 400px;
            border: 1px solid #ccc;
            border-radius: 8px;
            overflow: hidden;
            background: white;
        }
        
        .frame-header {
            background: #333;
            color: white;
            padding: 8px 12px;
            font-weight: bold;
            font-size: 14px;
        }
        
        .frame-image {
            width: 100%;
            height: 200px;
            background: #f5f5f5;
            position: relative;
            overflow: hidden;
        }
        
        .frame-image img {
            width: 100%;
            height: 100%;
            object-fit: cover;
            display: block;
        }
        
        .image-placeholder {
            width: 100%;
            height: 100%;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            background: #e0e0e0;
            color: #666;
            font-size: 12px;
            text-align: center;
            padding: 20px;
            box-sizing: border-box;
        }
        
        .image-placeholder p {
            margin: 5px 0;
        }
        
        .frame-description {
            padding: 15px;
            font-size: 12px;
            line-height: 1.4;
        }
        
        .frame-description p {
            margin: 5px 0;
        }
        
        .frame-description strong {
            color: #333;
        }
        
        .storyboard-footer {
            text-align: center;
            margin-top: 40px;
            padding-top: 20px;
            border-top: 1px solid #ccc;
            color: #666;
            font-size: 12px;
        }
        
        @media print {
            .frame-panel {
                page-break-inside: avoid;
            }
            
            .scene-section {
                page-break-inside: avoid;
            }
        }
    </style>
    """